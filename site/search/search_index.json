{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Toolkit","text":""},{"location":"#what-is-toolkit","title":"What Is Toolkit?","text":"<p>Toolkit is a collection of scripts, Python classes, assembler routines and build rules for developing programs for 8- and 16-bit computers. </p> <p>It is designed to be used with Accelerate and fast-ninja.</p>"},{"location":"#why-use-toolkit","title":"Why Use Toolkit?","text":"<p>Toolkit was primarily developed for use in our own programs.</p> <p>While the scripts creating assembly code, the provided assembler routines, and the build rules are specific to Accelerate and fast-ninja, some scripts and the underlying Python classes are more versatile.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Include Toolkit as a submodule in your Git repository:</p> <pre><code>git submodule add https://github.com/T-Pau/Toolkit Toolkit\n</code></pre>"},{"location":"#staying-in-touch","title":"Staying in Touch","text":"<p>If you found a problem, please create an issue on GitHub or let us know at toolkit@tpau.group.</p> <p>Also let us know if the documentation is incomplete, inaccurate, or hard to understand.</p>"},{"location":"License/","title":"License","text":"<p>Toolkit is released under a 2-clause BSD license:</p> <p>Copyright (C) 2023-2025 Dieter Baron</p> <p>The authors can be contacted at toolkit@tpau.group</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li> <p>Redistributions of source code must retain the above copyright    notice, this list of conditions and the following disclaimer.</p> </li> <li> <p>The names of the authors may not be used to endorse or promote   products derived from this software without specific prior   written permission.</p> </li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE AUTHORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"Explanations/","title":"Explanations","text":"<p>There are no articles available yet.</p>"},{"location":"How-To-Guides/","title":"How-To Guides","text":"<p>There are no guides available yet.</p>"},{"location":"Reference/","title":"Reference","text":""},{"location":"Reference/#scripts","title":"Scripts","text":"<ul> <li><code>convert-bitmap</code> \u2014 Convert bitmap image to native format.</li> <li><code>convert-characters</code> \u2014 Convert images to charset and screens.</li> <li><code>convert-charset</code> \u2014 </li> <li><code>convert-image</code> \u2014 </li> <li><code>convert-markdown</code> \u2014 Convert markdown to HTML.</li> <li><code>convert-screens</code> \u2014 </li> <li><code>convert-sprites</code> \u2014 </li> <li><code>create-disk</code> \u2014 Create Commodore disk image.</li> <li><code>create-zip</code> \u2014 Create zip archive.</li> <li><code>encode-colors</code> \u2014 </li> <li><code>parallel-struct</code> \u2014 </li> </ul>"},{"location":"Reference/convert-characters/","title":"convert-characters","text":""},{"location":"Reference/convert-characters/#convert-images-to-charset-and-screens","title":"Convert images to charset and screens.","text":""},{"location":"Reference/convert-characters/#synopsis","title":"Synopsis","text":"<pre><code>convert-characters [-M file] [-o file] [-I directory] [-s section] [-v] specs\n</code></pre>"},{"location":"Reference/convert-characters/#description","title":"Description","text":"<p>Convert images to charsets and screens according to specification file <code>specs</code>, which lists the images to convert and how to convert them.</p> <p>Images are divided into fixed sized blocks. Distinct blocks are stored in the charset and a screen matrix listing the block indices is created.</p> <p>It generates an assembler source file containing all the created objects.</p>"},{"location":"Reference/convert-characters/#supported-options","title":"Supported Options","text":"<code>-h</code>, <code>--help</code> Show help message and exit. <code>-I directory</code> Search for included files in <code>directory</code>. Can be given multiple times. <code>-M file<code> Write gcc-style dependency information to <code>file</code>. <code>-o file</code> Write generated assembly code to <code>file</code>. <code>-s section</code>, <code>--section section</code> Put generated objects in section <code>section</code>."},{"location":"Reference/convert-characters/#specification-file","title":"Specification File","text":"<p>The specification file uses YAML syntax.</p>"},{"location":"Reference/convert-characters/#global-directives","title":"Global Directives","text":"<code>charset</code> Charset definition or list of charset definition describing the created charsets. (required) <code>characters</code> List of character definitions describing images containing characters to convert. <code>images</code> List of image definitions describing the images to convert. <code>section name</code> Section to place created objects in. (default: <code>data</code>) <code>screen_width number</code> Specify the default width of the screen. (default: none)"},{"location":"Reference/convert-characters/#charset-directives","title":"Charset Directives","text":"<p>This describes the charsets to be created.</p> <code>align alignment</code> Align created object to <code>alignment</code> bytes. This is ignored if runlength-encoding is used. (default: no alignment) <code>count count</code> Charset contains <code>count</code> characters. (default: 256) <code>height height</code> Characters are <code>height</code> logical pixels high. (default: 8) <code>name string</code> Specify name of object created for this charset. (required) <code>predefined</code> Map of character codes to hex strings. These characters will be defined before processing characters and images. (default: none) <code>rl-encode boolean</code> Wether to runlength-encode the charset object (default: false). <code>section section</code> Section to place charset object in. (default: global <code>section</code>) <code>width width</code> Characters are <code>width</code> logical pixels wide (default: 8)."},{"location":"Reference/convert-characters/#character-directives","title":"Character Directives","text":"<p>This describes images containing character sets to include in the created charsets. The contained characters are placed in order, and no screen object will be created.</p> <code>additional_palette</code> A map of color values to palette indices which will be added to the palette. (default: none) <code>charset number</code> The characters will be stored in charset <code>number</code> (default: 0) <code>char-size-x number</code> The width of logical characters in chars. (default: 1) <code>char-size-y number</code> The height of logical characters in chars. (default: 1) <code>file name</code> The name of the file containing the image. <code>inverted enum</code> <p>(default: <code>none</code>)</p> <code>create</code> Create inverted characters for this image. <code>none</code> No inverted characters are needed for this image. <code>present</code> This image contains inverted characters. <code>offset number</code> The characters in the image will be placed starting at position <code>number</code> in the created charset. (default: 0) <code>palette</code> A map of color values to palette indices. (default: white: 1, black or transparent: 0, 0x40ff40: skip) <code>pixel-size-x size</code> Treat <code>size</code> horizontally adjacent pixels (which must be of the same color) as one logical pixel, useful for image formats with non-square pixels. (default: 1) <code>pixel-size-y size</code> Treat <code>size</code> vertically adjacent pixels (which must be of the same color) as one logical pixel, useful for image formats with non-square pixels. (default: 1)"},{"location":"Reference/convert-characters/#image-directives","title":"Image Directives","text":"<p>This describes an image to encode in the created charsets. A screen object will be created to record the character indices used.</p> <p>Optionally, the image can be sliced to create multiple screen objects.</p> <code>additional_palette</code> A map of color values to palette indices which will be added to the palette. (default: none) <code>charset</code> If this is a number, the image will be stored in that charset. If it is a map, the keys are line numbers and the values in which charset to store the portion of the image staring at that line. (default: 0) <code>file name</code> The name of the file containing the image. <code>include-count boolean</code> For a sliced image, include an object containing the number of screen objects created. (default: true) <code>include-index boolean</code> For a sliced image, include an object containing pointers to the screen objects. (default: true) <code>inverted enum</code> <p>(default: <code>none</code>)</p> <code>create</code> Create inverted characters for this image. <code>if-different</code> Store inverted character if it is different from no-inverted one. <code>none</code> No inverted characters are needed for this image. <code>present</code> This image contains inverted characters. <code>name string</code> Name of the created screen or index object. (required) <code>names string-list</code> For sliced images, a list of names for the screen object.  <code>palette</code> A map of color values to palette indices. (default: white: 1, black or transparent: 0, 0x40ff40: skip) <code>pixel-size-x size</code> Treat <code>size</code> horizontally adjacent pixels (which must be of the same color) as one logical pixel, useful for image formats with non-square pixels. (default: 1) <code>pixel-size-y size</code> Treat <code>size</code> vertically adjacent pixels (which must be of the same color) as one logical pixel, useful for image formats with non-square pixels. (default: 1) <code>rl-encode boolean</code> Wether to runlength-encode the screen object. (default: true) <code>screen-file </code> <code>screen-width width</code> The logical width of the screen for this image. If the image is narrower, the remaining bytes will be skipped in the runlength-encoded screen object (default: global <code>screen-width</code>). <code>slice-x number</code> Divide the image into <code>number</code> slices horizontally, creating a separate screen object for each slice. (default: 1) <code>slice-y number</code> Divide the image into <code>number</code> slices vertically, creating a separate screen object for each slice. (default: 1) <code>trim enum</code> <p>Specifies at which end of the encoded screen object skips will be omitted (default: <code>trailing</code>).</p> <code>none</code> Don't omit any skips. <code>both</code> Omit skips at the beginning and end. <code>leading</code> Omit skips at the beginning. <code>trailing</code> Omit skips at the end."},{"location":"Tutorials/","title":"Tutorials","text":"<p>There are no Tutorials available yet.</p>"}]}