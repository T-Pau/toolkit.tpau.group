<<<<<<< HEAD
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accelerate","text":""},{"location":"#what-is-accelerate","title":"What is Accelerate?","text":"<p>Accelerate is a flexible cross-assembler running on modern systems targeting multiple 8- and 16-bit computers. Support for additional CPU types, memory models, and output formats can easily be added via configuration files.</p> <p>Programs are divided into small objects like a single subroutine or variable. These objects are automatically arranged in memory according to provided constraints like alignment or placement within a certain memory region. This allows to fulfill the hardware requirements of the target machine while automatically using the remaining memory optimally.</p>"},{"location":"#warning","title":"Warning","text":"<p>This program is still in the early stages of development. It contains bugs and features that aren't completely implemented yet. Also, details may still change in backwards incompatible ways.</p>"},{"location":"#why-use-accelerate","title":"Why Use Accelerate?","text":"<p>Accelerate is especially useful if you develop for multiple CPU architectures, since it provides a uniform environment.</p> <p>If your program has a complicated memory layout, Accelerate helps fulfilling them without having to do it all manually.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>First, build and install Accelerate.</p> <p>Then, assemble your program:</p> <p><code>xlr8 -o program -t target sources ...</code></p>"},{"location":"#reporting-problems","title":"Reporting Problems","text":"<p>It's an old adage that it's never the compiler's fault, but since Accelerate is still young, bugs and misfeatures are likely. If you found a problem, please create an issue on GitHub or let us know at accelerate@tpau.group.</p> <p>Also let us know if the documentation is incomplete, inaccurate, or hard to understand.</p>"},{"location":"License/","title":"License","text":"<p>Accelerate is released under a 2-clause BSD license:</p> <p>Copyright (C) 2023-2025 Dieter Baron</p> <p>The authors can be contacted at accelerate@tpau.group</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li> <p>Redistributions of source code must retain the above copyright    notice, this list of conditions and the following disclaimer.</p> </li> <li> <p>The names of the authors may not be used to endorse or promote   products derived from this software without specific prior   written permission.</p> </li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE AUTHORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"Explanations/","title":"Explanations","text":""},{"location":"Explanations/#introduction","title":"Introduction","text":""},{"location":"Explanations/#rationale","title":"Rationale","text":""},{"location":"Explanations/#design-goals","title":"Design Goals","text":""},{"location":"Explanations/Design-Goals/","title":"Design Goals","text":"<p>These are the design goals of Accelerate, in order of importance:</p>"},{"location":"Explanations/Design-Goals/#1-be-correct-and-consistent","title":"1. Be correct and consistent.","text":"<p>Correct programs should be translated correctly, while errors in programs should be detected and reported, not silently lead to incorrect or undefined behavior.</p> <p>Accelerate supports reproducible builds: if given the same input files, it will create byte-wise identical results. This means that if a program is built from the same sources on two different computers, the resulting program will be byte-wise identical, which makes testing and creating distributions easier. (This does not hold across different versions of Accelerate.)</p>"},{"location":"Explanations/Design-Goals/#2-allow-extending-its-functionality-easily","title":"2. Allow extending its functionality easily.","text":"<p>Accelerate is a generic assembler without built-in knowledge of any CPU architecture, memory layout, or output file format. All these aspects are defined in easily readable configuration files.</p> <p>This allows adding support for new target computers without modifying Accelerate itself. </p> <p>A definition file can extend another, thus allowing to adapt existing platform support to your needs with a minimum of effort.</p>"},{"location":"Explanations/Design-Goals/#3-allow-precise-control-over-the-produced-binary-when-needed-without-requiring-it-when-not","title":"3. Allow precise control over the produced binary when needed, without requiring it when not.","text":"<p>You can specify the exact address where to place an object, or you can specify a memory region and alignment (i. e. the address must be divisible by a certain number). Accelerate will make sure the requirements are met, while placing the other elements as space-efficiently as possible.</p>"},{"location":"Explanations/Design-Goals/#4-meet-modern-expectations-of-a-programming-tool","title":"4. Meet modern expectations of a programming tool.","text":"<p>Accelerate is written in C++20 and should work on all modern platforms. It is a command line tool that follows the usual Unix conventions.</p> <p>Accelerate integrates well with development and build environments: If it encounters an error, it will not produce output files and exit with a non-zero status. Also, it supports gcc-style dependency tracking.</p>"},{"location":"Explanations/Design-Goals/#5-be-easy-to-use","title":"5. Be easy to use.","text":"<p>The language implemented by Accelerate tries to be easy to use: consistent, easy to remember, and readable.</p>"},{"location":"Explanations/Introduction/","title":"Introduction","text":"<p>Accelerate is a cross-assembler that runs on modern computers. It translates assembly language programs for retro computers into binaries that can run on those computers. It supports a variety of computers and CPU families, and adding support for more is relatively easy and can be done without changing and recompiling the assembler itself.</p> <p>All source, definition, and intermediary files are text files, although the latter are not meant to be edited by hand.</p> <p>The program is organized into source files and libraries, which contain objects, constants, macros, and functions. The assembly process is directed by a  target definition, which references a CPU definition. </p>"},{"location":"Explanations/Rationale/","title":"Rationale","text":"<p>While developing programs for multiple 8-bit computers, existing cross assemblers did not fit my needs in some key regards: </p> <ul> <li>They usually only target one CPU family, and all have slightly different syntax.</li> <li>They don\u2019t allow precise control where objects are placed in memory when necessary, while efficiently using the remaining memory automatically.</li> <li>Adding a new CPU variant requires understanding the inner workings of the assembler, changing and recompiling the assembler, and either getting the change accepted upstream or maintaining a fork.</li> <li>Not all assemblers support automatic dependency tracking of included files and used libraries, which makes integrating them into a build system much harder.</li> </ul> <p>To address these issues, Accelerate was created.</p> <p>CPU definitions are text files, so it is easy to add a new CPU family without altering the assembler itself. Definitions for variants can include the definition of the main CPU model and only specify the differences.</p> <p>The output file format is also defined in a text file, allowing to add new platforms and their requirements. File formats that further encode the binary data (like tape or disk images) need a separate program to do the final conversion.</p> <p>The program itself is divided into small objects, one for each function, variable, or table. This allows the assembler more flexibility in placing them in memory. For each object, the constraints imposed by the platform can be specified, for example a fixed address, address alignment, or placement in a specific memory region. Gaps left by placing them are filled with other objects.</p> <p>This also allows libraries to be more efficient, since only the objects actually used will be included in the program.</p>"},{"location":"How-To-Guides/","title":"How-To Guides","text":"<p>There are no How-To Guides available yet.</p>"},{"location":"Reference/","title":"Reference","text":""},{"location":"Reference/#assembler-source-file","title":"Assembler Source File","text":"<p>A source file contains definitions that will be translated to a library or a binary program.</p> <p>It consists of a list of elements and directives, separated by newlines. Instructions, labels, and assignments within an object or macro are also separated by newlines.</p>"},{"location":"Reference/#expressions","title":"Expressions","text":"<p>Expressions are used in various places in a program.</p>"},{"location":"Reference/#library","title":"Library","text":"<p>A library is a collection of objects, constants, macros, and functions. </p> <p>When importing a library, only the objects actually used will be included in the resulting binary program. This gives you flexibility in how you organize your code: even using only a small portion of a large library does not sacrifice efficiency.</p>"},{"location":"Reference/#target-definition","title":"Target Definition","text":"<p>A target definition defines the memory layout and binary file format. It supports all the directives of assembler source files and a few additional directives.</p>"},{"location":"Reference/#cpu-definition","title":"CPU Definition","text":"<p>A CPU definition defines the syntax of the assembly instructions and how they are encoded.</p>"},{"location":"Reference/Assembler-Source-File/","title":"Assembler Source File","text":"<p>A source file contains definitions that will be translated to a library or a binary program.</p> <p>It consists of a list of elements and directives, separated by newlines. Instructions, labels, and assignments within an object or macro are also separated by newlines.</p>"},{"location":"Reference/Assembler-Source-File/#directives","title":"Directives","text":""},{"location":"Reference/Assembler-Source-File/#cpu","title":"<code>.cpu</code>","text":"<pre>\n  <code>.cpu name</code>\n</pre> <p>This overrides the CPU specified in the target for this file.</p>"},{"location":"Reference/Assembler-Source-File/#pin","title":"<code>.pin</code>","text":"<pre>\n  <code>.pin name address</code>\n</pre> <p>Sets the address of object name to address and marks it as used.</p>"},{"location":"Reference/Assembler-Source-File/#section","title":"<code>.section</code>","text":"<pre>\n  <code>.section section-name</code>\n</pre> <p>The <code>.section</code> directive specifies which section the following objects will be placed in. This determines where in memory they will be placed, and whether they will be included in the binary program (data objects) or not (reservation objects).</p>"},{"location":"Reference/Assembler-Source-File/#target","title":"<code>.target</code>","text":"<pre>\n  <code>.target \"target-name\"</code>\n</pre> <p>The <code>.target</code> directive specifies which target definition file will be used in translating the file.</p>"},{"location":"Reference/Assembler-Source-File/#use","title":"<code>.use</code>","text":"<pre>\n  <code>.use name</code>\n</pre> <p>Marks the object name as used.</p>"},{"location":"Reference/Assembler-Source-File/#visibility","title":"<code>.visibility</code>","text":"<pre>\n<code>.visibility {public|private}</code>\n</pre> <p>The <code>.visibility</code> directive specifies the visibility of the following elements.</p> <p><code>private</code> elements are only visible within the same module (library, main program, or target).</p> <p><code>public</code> elements are also visible to modules using a library. Elements from the program used by the target must also be <code>public</code>.</p>"},{"location":"Reference/Assembler-Source-File/#elements","title":"Elements","text":""},{"location":"Reference/Assembler-Source-File/#element-modifiers","title":"Element Modifiers","text":"<p>Elements can be preceded by one or more modifiers:</p>"},{"location":"Reference/Assembler-Source-File/#default","title":"<code>.default</code>","text":"<p>This definition is only used if no regular definition with the same name is found. It can be used by a target to define a default implementation.</p>"},{"location":"Reference/Assembler-Source-File/#private","title":"<code>.private</code>","text":"<p>Makes the element private.</p>"},{"location":"Reference/Assembler-Source-File/#public","title":"<code>.public</code>","text":"<p>Makes the element public.</p>"},{"location":"Reference/Assembler-Source-File/#objects","title":"Objects","text":""},{"location":"Reference/Assembler-Source-File/#object-modifiers","title":"Object Modifiers","text":""},{"location":"Reference/Assembler-Source-File/#align","title":"<code>.align</code>","text":"<pre>\n<code>.align alignment</code>\n</pre> <p>The object's address will be a multiple of alignment.</p>"},{"location":"Reference/Assembler-Source-File/#address","title":"<code>.address</code>","text":"<pre>\n  <code>.address address</code>\n</pre> <p>Specifies the address to place the object at.</p>"},{"location":"Reference/Assembler-Source-File/#used","title":"<code>.used</code>","text":"<p>Marks the object as used.</p>"},{"location":"Reference/Assembler-Source-File/#uses","title":"<code>.uses</code>","text":"<pre>\n  <code>.uses name</code>\n</pre> <p>If the object is used, object name is also used.</p>"},{"location":"Reference/Assembler-Source-File/#data-objects","title":"Data Objects","text":"<p>These contain code or other data and are saved in the resulting program binary:</p> <pre>\n  <code>[element modifiers] name [object modifiers] {\n    body\n}</code>\n</pre>"},{"location":"Reference/Assembler-Source-File/#reservation-object","title":"Reservation Object","text":"<p>These only reserve a certain amount of memory, which will not be initialized and is usually not saved in the resulting program binary:</p> <pre>\n  <code>[element modifiers] name [object modifiers] .reserve length</code>\n</pre>"},{"location":"Reference/Assembler-Source-File/#constants","title":"Constants","text":"<p>Constants define values that can be used in other parts of the program. They can refer to other constants or objects (which results in their address).</p> <pre>\n  <code>[element modifiers] name = value</code>\n</pre>"},{"location":"Reference/Assembler-Source-File/#macros","title":"Macros","text":"<pre>\n  <code>[element modifiers] .macro name [argument[=default-value], ...] {\n    body\n}</code>\n</pre>"},{"location":"Reference/Assembler-Source-File/#functions","title":"Functions","text":"<pre>\n  <code>[element modifiers] name ([argument[=default-value], ...]) = value</code>\n</pre>"},{"location":"Reference/CPU-Definition/","title":"CPU Definition","text":"<p>A CPU definition defines the syntax of the assembly instructions and how they are encoded.</p>"},{"location":"Reference/CPU-Definition/#directives","title":"Directives","text":""},{"location":"Reference/CPU-Definition/#addressing_mode","title":"<code>.addressing_mode</code>","text":"<pre>\n<code>.addressing_mode name {\n    parameters\n}</code>\n</pre>"},{"location":"Reference/CPU-Definition/#notation","title":"<code>notation</code>","text":"<p>This parameter is optional. If it is missing, the notation is just the mnemonic of the instruction.</p>"},{"location":"Reference/CPU-Definition/#arguments","title":"<code>arguments</code>","text":"<p>This parameter is optional. If it is missing, the addressing mode has no arguments.</p>"},{"location":"Reference/CPU-Definition/#encoding","title":"<code>encoding</code>","text":""},{"location":"Reference/CPU-Definition/#opcode","title":"<code>.opcode</code>","text":""},{"location":"Reference/CPU-Definition/#pc","title":"<code>.pc</code>","text":""},{"location":"Reference/CPU-Definition/#argument_type","title":"<code>.argument_type</code>","text":""},{"location":"Reference/CPU-Definition/#enum","title":"<code>.enum</code>","text":"<pre>\n<code>.argument_type name map {\n    name: encoded-value\n    ...\n}</code>\n</pre> <p>The argument must be one of the specified name and is encoded as the corresponding encoded-value. All names must be keywords, all values must be integers.</p>"},{"location":"Reference/CPU-Definition/#fits","title":"<code>.fits</code>","text":"<pre>\n  <code>.argument_type name fits integer_encoding</code>\n</pre> <p>The argument must fit in the specified integer encoding.</p> <p>For example:</p> <pre><code>.argument_type byte fits 1\n.argument_type signed_byte fits -1\n.argument_type word fits 2\n</code></pre>"},{"location":"Reference/CPU-Definition/#map","title":"<code>.map</code>","text":"<pre>\n<code>.argument_type name map {\n    source-value: encoded-value\n    ...\n}</code>\n</pre> <p>The argument must be one of the specified source-value and is encoded as the corresponding encoded-value. All values must be integers.</p>"},{"location":"Reference/CPU-Definition/#range","title":"<code>.range</code>","text":"<p>Warning: This argument type is currently broken. Don't use it.</p>"},{"location":"Reference/CPU-Definition/#byte_order","title":"<code>.byte_order</code>","text":"<p>Specify the native byte order of the CPU.</p> <pre>\n  <code>.byte_order byte_order</code>\n</pre> <p>Each digit in byte_order corresponds to one byte, with <code>1</code> representing the least significant and <code>8</code> the most significant byte. Bytes are encode in memory in the order they are listed. For example, little endian is <code>12345678</code>, big endian is <code>87654321</code>.</p>"},{"location":"Reference/CPU-Definition/#instruction","title":"<code>.instruction</code>","text":"<pre>\n<code>.instruction mnemonic {\n    addressing-mode: opcode\n    ...\n}</code>\n</pre>"},{"location":"Reference/CPU-Definition/#syntax","title":"<code>.syntax</code>","text":"<pre>\n  <code>.syntax [keywords|punctuation] \"symbol\" ...</code>\n</pre> <p>This specifies punctuation and keywords used the assembler syntax. Keywords that are valid identifiers (begin with a letter or underscore and contain only letters, underscore, and digits) need not be specified.</p>"},{"location":"Reference/Expressions/","title":"Expressions","text":"<p>Expressions are used in various places in a program.</p>"},{"location":"Reference/Expressions/#types","title":"Types","text":""},{"location":"Reference/Expressions/#void","title":"Void","text":"<p>This type represents the absence of a value and is written as <code>.none</code>. It can be used in macros as default value for optional arguments. </p>"},{"location":"Reference/Expressions/#boolean","title":"Boolean","text":"<p>A boolean is either <code>.true</code> or <code>.false</code>. Numbers and strings can be implicitly converted to boolean, with <code>0</code> and the empty string being <code>.false</code> and all others being <code>.true</code>.</p>"},{"location":"Reference/Expressions/#signed-integers","title":"Signed Integers","text":"<p>A signed integer with a maximum precision of 64 bits, giving a value range of -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.</p>"},{"location":"Reference/Expressions/#unsigned-integer","title":"Unsigned Integer","text":"<p>An unsigned integer with a maximum precision of 64 bits, giving a value range of 0 to 18,446,744,073,709,551,615.</p> <p>For hexadecimal numbers, prefix them with <code>$</code>, for binary numbers with <code>%</code>.</p>"},{"location":"Reference/Expressions/#floating-point-number","title":"Floating Point Number","text":"<p>A floating point number expressed as a double.</p> <p>Scientific notation (including an exponent) is not supported yet.</p>"},{"location":"Reference/Expressions/#string","title":"String","text":"<p>Strings are enclosed in <code>\"</code> and support Unicode characters.</p>"},{"location":"Reference/Expressions/#characters","title":"Characters","text":"<p>Characters are not a separate type, but a different way to specify an unsigned integer. They are enclosed in <code>'</code> and can optionally be followed by <code>:</code> and the name of a string encoding. They are translated to an unsigned number according to the string encoding. </p>"},{"location":"Reference/Expressions/#operators","title":"Operators","text":""},{"location":"Reference/Expressions/#unary-operators","title":"Unary Operators","text":"<p>All unary operators are followed by their operand and have higher precedence than binary operators.</p>"},{"location":"Reference/Expressions/#logical-not","title":"<code>!</code> (Logical Not)","text":"<p>Converts its operand to boolean and negates it. The result is always boolean.</p>"},{"location":"Reference/Expressions/#unary-plus","title":"<code>+</code> (Unary Plus)","text":"<p>The operand must be a number, the result is the operand unchanged.</p>"},{"location":"Reference/Expressions/#-unary-minus","title":"<code>-</code> (Unary Minus)","text":"<p>The operand must be a number, the result is the negative operand. </p>"},{"location":"Reference/Expressions/#bank-byte","title":"<code>^</code> (Bank Byte)","text":"<p>The operand must be an unsigned integer, the result is the third lowest byte of the operand.</p>"},{"location":"Reference/Expressions/#low-byte","title":"<code>&lt;</code> (Low Byte)","text":"<p>The operand must be an unsigned integer, the result is the lowest byte of the operand.</p>"},{"location":"Reference/Expressions/#hight-byte","title":"<code>&gt;</code> (Hight Byte)","text":"<p>The operand must be an unsigned integer, the result is the second lowest byte of the operand (high byte of a 16-bit value).</p>"},{"location":"Reference/Expressions/#bitwise-not","title":"<code>~</code> (Bitwise Not)","text":"<p>The operand must be an unsigned integer, the result is the operand with each bit inverted.</p>"},{"location":"Reference/Expressions/#binary-operators","title":"Binary Operators","text":"<p>All binary operators are left associative. The following list shows their relative precedence from high to low; operands on one line have the same precedence:</p> <ul> <li><code>&lt;&lt;</code> (Shift Left), <code>&gt;&gt;</code> (Shift Right)</li> <li><code>*</code> (Multiply), <code>/</code> (Divide), <code>&amp;</code> (Bitwise And)</li> <li><code>+</code> (Add), <code>-</code> (Subtract), <code>|</code> (Bitwise Or), <code>^</code> (Bitwise Exclusive Or)</li> <li><code>==</code> (Equal), <code>!=</code> (Not Equal), <code>&lt;</code> (Less), <code>&lt;=</code> (Less Than), <code>&gt;</code> (Greater), <code>&gt;=</code> (Greater Than)</li> <li><code>&amp;&amp;</code> (Logical And)</li> <li><code>||</code> (Logical Or)</li> </ul>"},{"location":"Reference/Expressions/#shift-left","title":"<code>&lt;&lt;</code> (Shift Left)","text":"<p>Both operands must be integers. The left operand is shifted to the left by the number of bits of the value of the right operand. The result has the same type as the left operand.</p>"},{"location":"Reference/Expressions/#shift-right","title":"<code>&gt;&gt;</code> (Shift Right)","text":"<p>Both operands must be integers. The left operand is shifted to the left by the number of bits of the value of the right operand. The result has the same type as the left operand.</p>"},{"location":"Reference/Expressions/#multiply","title":"<code>*</code> (Multiply)","text":"<p>Both operands must be numbers. The result is the product of the two operands. If both operands are integers, the result is an integer, otherwise a float point number.</p>"},{"location":"Reference/Expressions/#divide","title":"<code>/</code> (Divide)","text":"<p>Both operands must be numbers. If both operands are integers, the result is the quotient of the two operands, otherwise a floating point division is performed.</p>"},{"location":"Reference/Expressions/#bitwise-and","title":"<code>&amp;</code> (Bitwise And)","text":"<p>Both operands must be unsigned integers. The result is the bitwise and of the two operands.</p>"},{"location":"Reference/Expressions/#add","title":"<code>+</code> (Add)","text":"<p>Both operands must be numbers. The result is the sum of the two operands. If both operands are integers, the result is an integer, otherwise a float point number.</p>"},{"location":"Reference/Expressions/#-subtract","title":"<code>-</code> (Subtract)","text":"<p>Both operands must be numbers. The result is the difference of the two operands. If both operands are integers, the result is an integer, otherwise a float point number.</p>"},{"location":"Reference/Expressions/#bitwise-or","title":"<code>|</code> (Bitwise Or)","text":"<p>Both operands must be unsigned integers. The result is the bitwise or of the two operands.</p>"},{"location":"Reference/Expressions/#bitwise-exclusive-or","title":"<code>^</code> (Bitwise Exclusive Or)","text":"<p>Both operands must be unsigned integers. The result is the bitwise exclusive or of the two operands.</p>"},{"location":"Reference/Expressions/#equal","title":"<code>==</code> (Equal)","text":"<p>Both operands must be either booleans, numbers, or strings. The result is <code>true</code> if both operands are the same, <code>false</code> otherwise.</p>"},{"location":"Reference/Expressions/#not-equal","title":"<code>!=</code> (Not Equal)","text":"<p>Both operands must be either booleans, numbers, or strings. The result is <code>false</code> if both operands are the same, <code>true</code> otherwise.</p>"},{"location":"Reference/Expressions/#less","title":"<code>&lt;</code> (Less)","text":"<p>Both operands must be either numbers or strings. The result is <code>false</code> if the left operand is less than the right, <code>true</code> otherwise.</p>"},{"location":"Reference/Expressions/#less-equal","title":"<code>&lt;=</code> (Less Equal)","text":"<p>Both operands must be either numbers or strings. The result is <code>false</code> if the left operand is grelessater than or equal to the right, <code>true</code> otherwise.</p>"},{"location":"Reference/Expressions/#greater","title":"<code>&gt;</code> (Greater)","text":"<p>Both operands must be either numbers or strings. The result is <code>false</code> if the left operand is greater than the right, <code>true</code> otherwise.</p>"},{"location":"Reference/Expressions/#greater-equal","title":"<code>&gt;=</code> (Greater Equal)","text":"<p>Both operands must be either numbers or strings. The result is <code>false</code> if the left operand is greater than or equal to the right, <code>true</code> otherwise.</p>"},{"location":"Reference/Expressions/#logical-and","title":"<code>&amp;&amp;</code> (Logical And)","text":"<p>Both operands are converted to boolean. The result is <code>true</code> if both operands are true, <code>false</code> otherwise.</p>"},{"location":"Reference/Expressions/#logical-or","title":"<code>||</code> (Logical Or)","text":"<p>Both operands are converted to boolean. The result is <code>true</code> if at least one operand is true, <code>false</code> otherwise.</p>"},{"location":"Reference/Structured-Values/","title":"Structured Values","text":""},{"location":"Reference/Structured-Values/#array","title":"Array","text":"<pre>\n<code>[\n    [element\n    ...]\n]</code>\n</pre>"},{"location":"Reference/Structured-Values/#dictionary","title":"Dictionary","text":"<pre>\n<code>{\n    [key value\n    ...]\n}</code>\n</pre>"},{"location":"Reference/Structured-Values/#scalar","title":"Scalar","text":"<pre>\n<code>: [value ...]</code>\n</pre>"},{"location":"Reference/Target-Definition/","title":"Target Definition","text":"<p>A target definition defines the memory layout and binary file format. It supports all the directives of assembler source files and a few additional directives.</p>"},{"location":"Reference/Target-Definition/#directives","title":"Directives","text":""},{"location":"Reference/Target-Definition/#default_string_encoding","title":"<code>.default_string_encoding</code>","text":"<pre>\n  <code>.default_string_encoding name</code>\n</pre>"},{"location":"Reference/Target-Definition/#extension","title":"<code>.extension</code>","text":"<pre>\n  <code>.extension \"extension\"</code>\n</pre>"},{"location":"Reference/Target-Definition/#output","title":"<code>.output</code>","text":"<pre>\n  <code>.output {\n    body\n}</code>\n</pre>"},{"location":"Reference/Target-Definition/#section","title":"<code>.section</code>","text":"<pre>\n  <code>.section {\n\n}</code>\n</pre>"},{"location":"Reference/Target-Definition/#segment","title":"<code>.segment</code>","text":"<pre>\n  <code>.segment {\n\n}</code>\n</pre>"},{"location":"Reference/Target-Definition/#string_encoding","title":"<code>.string_encoding</code>","text":""},{"location":"Tutorials/","title":"Tutorials","text":""},{"location":"Tutorials/#hello-world-for-the-commodore-64","title":"Hello World for the Commodore 64","text":"<p>A simple Hello World example for the Commodore 64, showing basic usage of the assembler.</p>"},{"location":"Tutorials/Hello-World-C64/","title":"Hello World for the Commodore 64","text":"<p>Place the following examlpe in a file called hello-world-c64.s and compile with the command</p> <pre><code>xlr8 --target c64-basic hello-world-c64.s cbm.lib\n</code></pre> <code>.section zero_page</code>; Place following objects into the zero page. <code>ptr .reserve 2</code>; Reserve a 2-byte variable called <code>ptr</code> in the zero page. <code>.section code</code>; Place the follwing symbols in the code section, which for this target is in the BASIC program area. <code>.public start {</code>; Begin the code object named <code>start</code>, which will be called when starting the resulting program. <code>    lda #&lt;message</code>; Copy the address of the object <code>message</code> to the variable <code>ptr</code>. <code>    sta ptr</code> <code>    lda #&gt;message</code> <code>    sta ptr + 1</code> <code>    ldy #0</code>; Print the 0-terminated string at <code>message</code> to the screen using the kernal routine <code>CHROUT</code>. <code>loop:</code> <code>    lda (ptr),y</code> <code>    beq end</code> <code>    jsr CHROUT</code> <code>    iny</code> <code>    bne loop</code> <code>end:</code> <code>    rts</code>; Return to BASIC. <code>}</code>; End the code object <code>start</code>. <code>.section data</code>; Place the following symbols in the data section, which for this target is also in the BASIC program area. <code>message {</code>; Create the object <code>message</code> containing the string to print, using the default stirng encoding PETSCII. <code>    .data \"{clear}hello world!{return}\", 0</code>; The named character <code>{clear}</code> is the control code to clear the screen. <code>}</code>"}]}
=======
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Toolkit","text":""},{"location":"#what-is-toolkit","title":"What Is Toolkit?","text":"<p>Toolkit is a collection of scripts, Python classes, assembler routines and build rules for developing programs for 8- and 16-bit computers. </p> <p>It is designed to be used with Accelerate and fast-ninja.</p>"},{"location":"#why-use-toolkit","title":"Why Use Toolkit?","text":"<p>Toolkit was primarily developed for use in our own programs.</p> <p>While the scripts creating assembly code, the provided assembler routines, and the build rules are specific to Accelerate and fast-ninja, some scripts and the underlying Python classes are more versatile.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Include Toolkit as a submodule in your Git repository:</p> <pre><code>git submodule add https://github.com/T-Pau/Toolkit Toolkit\n</code></pre>"},{"location":"#staying-in-touch","title":"Staying in Touch","text":"<p>If you found a problem, please create an issue on GitHub or let us know at toolkit@tpau.group.</p> <p>Also let us know if the documentation is incomplete, inaccurate, or hard to understand.</p>"},{"location":"License/","title":"License","text":"<p>Toolkit is released under a 2-clause BSD license:</p> <p>Copyright (C) 2023-2025 Dieter Baron</p> <p>The authors can be contacted at toolkit@tpau.group</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li> <p>Redistributions of source code must retain the above copyright    notice, this list of conditions and the following disclaimer.</p> </li> <li> <p>The names of the authors may not be used to endorse or promote   products derived from this software without specific prior   written permission.</p> </li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE AUTHORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"Explanations/","title":"Explanations","text":"<p>There are no articles available yet.</p>"},{"location":"How-To-Guides/","title":"How-To Guides","text":"<p>There are no guides available yet.</p>"},{"location":"Reference/","title":"Reference","text":""},{"location":"Reference/#scripts","title":"Scripts","text":"<ul> <li><code>convert-bitmap</code> \u2014 Convert bitmap image to native format.</li> <li><code>convert-characters</code> \u2014 Convert images to charset and screens.</li> <li><code>convert-charset</code> \u2014 </li> <li><code>convert-image</code> \u2014 </li> <li><code>convert-markdown</code> \u2014 </li> <li><code>convert-screens</code> \u2014 </li> <li><code>convert-sprites</code> \u2014 </li> <li><code>create-disk</code> \u2014 </li> <li><code>create-zip</code> \u2014 </li> <li><code>encode-colors</code> \u2014 </li> <li><code>parallel-struct</code> \u2014 </li> </ul>"},{"location":"Reference/convert-characters/","title":"convert-characters","text":""},{"location":"Reference/convert-characters/#convert-images-to-charset-and-screens","title":"Convert images to charset and screens.","text":""},{"location":"Reference/convert-characters/#synopsis","title":"Synopsis","text":"<pre><code>convert-characters [-M file] [-o file] [-I directory] [-s section] [-v] specs\n</code></pre>"},{"location":"Reference/convert-characters/#description","title":"Description","text":"<p>Convert images to charsets and screens according to specification file <code>specs</code>, which lists the images to convert and how to convert them.</p> <p>Images are divided into fixed sized blocks. Distinct blocks are stored in the charset and a screen matrix listing the block indices is created.</p> <p>It generates an assembler source file containing all the created objects.</p>"},{"location":"Reference/convert-characters/#supported-options","title":"Supported Options","text":"<code>-h</code>, <code>--help</code> Show help message and exit. <code>-I directory</code> Search for included files in <code>directory</code>. Can be given multiple times. <code>-M file<code> Write gcc-style dependency information to <code>file</code>. <code>-o file</code> Write generated assembly code to <code>file</code>. <code>-s section</code>, <code>--section section</code> Put generated objects in section <code>section</code>."},{"location":"Reference/convert-characters/#specification-file","title":"Specification File","text":"<p>The specification file uses YAML syntax.</p>"},{"location":"Reference/convert-characters/#global-directives","title":"Global Directives","text":"<code>charset</code> Charset definition or list of charset definition describing the created charsets. (required) <code>characters</code> List of character definitions describing images containing characters to convert. <code>images</code> List of image definitions describing the images to convert. <code>section name</code> Section to place created objects in. (default: <code>data</code>) <code>screen_width number</code> Specify the default width of the screen. (default: none)"},{"location":"Reference/convert-characters/#charset-directives","title":"Charset Directives","text":"<p>This describes the charsets to be created.</p> <code>align alignment</code> Align created object to <code>alignment</code> bytes. This is ignored if runlength-encoding is used. (default: no alignment) <code>count count</code> Charset contains <code>count</code> characters. (default: 256) <code>height height</code> Characters are <code>height</code> logical pixels high. (default: 8) <code>name string</code> Specify name of object created for this charset. (required) <code>predefined</code> Map of character codes to hex strings. These characters will be defined before processing characters and images. (default: none) <code>rl-encode boolean</code> Wether to runlength-encode the charset object (default: false). <code>section section</code> Section to place charset object in. (default: global <code>section</code>) <code>width width</code> Characters are <code>width</code> logical pixels wide (default: 8)."},{"location":"Reference/convert-characters/#character-directives","title":"Character Directives","text":"<p>This describes images containing character sets to include in the created charsets. The contained characters are placed in order, and no screen object will be created.</p> <code>additional_palette</code> A map of color values to palette indices which will be added to the palette. (default: none) <code>charset number</code> The characters will be stored in charset <code>number</code> (default: 0) <code>char-size-x number</code> The width of logical characters in chars. (default: 1) <code>char-size-y number</code> The height of logical characters in chars. (default: 1) <code>file name</code> The name of the file containing the image. <code>inverted enum</code> <p>(default: <code>none</code>)</p> <code>create</code> Create inverted characters for this image. <code>none</code> No inverted characters are needed for this image. <code>present</code> This image contains inverted characters. <code>offset number</code> The characters in the image will be placed starting at position <code>number</code> in the created charset. (default: 0) <code>palette</code> A map of color values to palette indices. (default: white: 1, black or transparent: 0, 0x40ff40: skip) <code>pixel-size-x size</code> Treat <code>size</code> horizontally adjacent pixels (which must be of the same color) as one logical pixel, useful for image formats with non-square pixels. (default: 1) <code>pixel-size-y size</code> Treat <code>size</code> vertically adjacent pixels (which must be of the same color) as one logical pixel, useful for image formats with non-square pixels. (default: 1)"},{"location":"Reference/convert-characters/#image-directives","title":"Image Directives","text":"<p>This describes an image to encode in the created charsets. A screen object will be created to record the character indices used.</p> <p>Optionally, the image can be sliced to create multiple screen objects.</p> <code>additional_palette</code> A map of color values to palette indices which will be added to the palette. (default: none) <code>charset</code> If this is a number, the image will be stored in that charset. If it is a map, the keys are line numbers and the values in which charset to store the portion of the image staring at that line. (default: 0) <code>file name</code> The name of the file containing the image. <code>include-count boolean</code> For a sliced image, include an object containing the number of screen objects created. (default: true) <code>include-index boolean</code> For a sliced image, include an object containing pointers to the screen objects. (default: true) <code>inverted enum</code> <p>(default: <code>none</code>)</p> <code>create</code> Create inverted characters for this image. <code>if-different</code> Store inverted character if it is different from no-inverted one. <code>none</code> No inverted characters are needed for this image. <code>present</code> This image contains inverted characters. <code>name string</code> Name of the created screen or index object. (required) <code>names string-list</code> For sliced images, a list of names for the screen object.  <code>palette</code> A map of color values to palette indices. (default: white: 1, black or transparent: 0, 0x40ff40: skip) <code>pixel-size-x size</code> Treat <code>size</code> horizontally adjacent pixels (which must be of the same color) as one logical pixel, useful for image formats with non-square pixels. (default: 1) <code>pixel-size-y size</code> Treat <code>size</code> vertically adjacent pixels (which must be of the same color) as one logical pixel, useful for image formats with non-square pixels. (default: 1) <code>rl-encode boolean</code> Wether to runlength-encode the screen object. (default: true) <code>screen-file </code> <code>screen-width width</code> The logical width of the screen for this image. If the image is narrower, the remaining bytes will be skipped in the runlength-encoded screen object (default: global <code>screen-width</code>). <code>slice-x number</code> Divide the image into <code>number</code> slices horizontally, creating a separate screen object for each slice. (default: 1) <code>slice-y number</code> Divide the image into <code>number</code> slices vertically, creating a separate screen object for each slice. (default: 1) <code>trim enum</code> <p>Specifies at which end of the encoded screen object skips will be omitted (default: <code>trailing</code>).</p> <code>none</code> Don't omit any skips. <code>both</code> Omit skips at the beginning and end. <code>leading</code> Omit skips at the beginning. <code>trailing</code> Omit skips at the end."},{"location":"Tutorials/","title":"Examples","text":"<p>There are no Tutorials available yet.</p>"}]}
>>>>>>> bd0a15b (Flesh out.)
